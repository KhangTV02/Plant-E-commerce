import React, { useState } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";
import displayINRCurrency from "../helpers/displayCurrency";
import scrollTop from "../helpers/scrollTop";
import SimilarProducts from "../components/SimilarProducts"; // ‚úÖ Import s·∫£n ph·∫©m t∆∞∆°ng t·ª±

const SearchByImage = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [predictedPlant, setPredictedPlant] = useState("");
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [imagePreview, setImagePreview] = useState(""); // ‚úÖ L∆∞u ·∫£nh m√† ng∆∞·ªùi d√πng t·∫£i l√™n
  const [searchCompleted, setSearchCompleted] = useState(false); // ‚úÖ Ki·ªÉm so√°t vi·ªác t√¨m ki·∫øm xong
   const [confidence] = useState(null); // ‚úÖ L∆∞u ƒë·ªô ch√≠nh x√°c c·ªßa k·∫øt qu·∫£ t√¨m ki·∫øm
  const navigate = useNavigate();

  const handleFileChange = (event) => {
    const file = event.target.files[0];
      if (!file) {
    return;
    }
    
     // ‚úÖ Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
  const validExtensions = ["image/jpeg", "image/png"];
  if (!validExtensions.includes(file.type)) {
    toast.error("Ch·ªâ ch·∫•p nh·∫≠n t·ªáp .jpg ho·∫∑c .png!");
    return;
  }
    setSelectedFile(file);
    setImagePreview(URL.createObjectURL(file)); // ‚úÖ Hi·ªÉn th·ªã ·∫£nh m√† ng∆∞·ªùi d√πng ch·ªçn
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      toast.error("Vui l√≤ng ch·ªçn m·ªôt ·∫£nh!");
      return;
    }

    setLoading(true);
    setSearchCompleted(false); // Reset tr·∫°ng th√°i khi t√¨m ki·∫øm m·ªõi
    const formData = new FormData();
    formData.append("image", selectedFile);

    try {
      const response = await axios.post("http://127.0.0.1:5001/predict", formData);

      
      console.log("üîπ API Response:", response.data);

      setPredictedPlant(response.data.plant_name);
      setProducts(response.data.products || []);
      setSearchCompleted(true); // ‚úÖ ƒê√°nh d·∫•u t√¨m ki·∫øm ho√†n t·∫•t
    } catch (error) {
      toast.error("L·ªói t·∫£i ·∫£nh:", error);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ H√†m x·ª≠ l√Ω khi click v√†o s·∫£n ph·∫©m t∆∞∆°ng t·ª±
  const handleProductClick = (productId) => {
    navigate(`/product/${productId}`);
    scrollTop();
  };

  return (
    <div className="p-4 container mx-auto text-center mt-10">
      <h2 className="text-lg font-bold">T√¨m ki·∫øm c√¢y c·∫£nh b·∫±ng h√¨nh ·∫£nh</h2>

      <input type="file" accept="image/*" onChange={handleFileChange} className="border p-2" />

      <button onClick={handleUpload} className="bg-blue-600 text-white p-2 rounded ml-2">
        T√¨m ki·∫øm
      </button>

      {/* ‚úÖ Lu√¥n hi·ªÉn th·ªã ·∫£nh m√† ng∆∞·ªùi d√πng ƒë√£ t·∫£i l√™n */}
      {imagePreview && (
        <div className="mt-4">
          <h3 className="text-xl font-bold">·∫¢nh ƒë√£ t·∫£i l√™n</h3>
          <img
            src={imagePreview}
            alt="·∫¢nh ƒë√£ t·∫£i l√™n"
            className="mt-2 mx-auto rounded-lg shadow-lg"
            style={{ width: "300px" }}
          />
        </div>
      )}

      {loading && <p>ƒêang x·ª≠ l√Ω...</p>}

      {/* ‚úÖ Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n ch·ªâ khi c√≥ d·ªØ li·ªáu */}
      {searchCompleted && products.length > 0 &&  (
        <>
          <h3 className="text-xl font-bold pt-2">D·ª± ƒëo√°n: {predictedPlant}</h3>
          {/* <p className="text-gray-500">üîç ƒê·ªô ch√≠nh x√°c: {confidence}</p> */}
          <div className="mt-4">
            <h4 className="text-lg font-semibold">S·∫£n ph·∫©m li√™n quan:</h4>
            <div className="flex gap-12 p-4 justify-center">
              {products.map((product) => (
                <div
                  key={product._id}
                  className="bg-white p-4 rounded shadow cursor-pointer hover:shadow-lg transition-shadow"
                  onClick={() => handleProductClick(product._id)}
                >
                  <img
                    src={product.plantImage[0]}
                    alt={product.plantName}
                    className="w-52 h-40 object-cover rounded"
                  />
                  <p className="text-lg font-medium mt-2">{product.plantName}</p>
                  <p className="text-red-600 font-medium">
                    {displayINRCurrency(product.sellingPrice || product.price)}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </>
      )}

      {/* ‚úÖ N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m ch√≠nh x√°c, hi·ªÉn th·ªã s·∫£n ph·∫©m t∆∞∆°ng t·ª± */}
      {searchCompleted && products.length === 0 && (
        <div className="mt-4">
          <p className="text-gray-500">
            S·∫£n ph·∫©m b·∫°n t√¨m kh√¥ng c√≥! H√£y ch·ªçn nh·ªØng s·∫£n ph·∫©m kh√°c b√™n d∆∞·ªõi.
          </p>
          <SimilarProducts excludeProductId={null} onProductClick={handleProductClick} />
        </div>
      )}
    </div>
  );
};

export default SearchByImage;
